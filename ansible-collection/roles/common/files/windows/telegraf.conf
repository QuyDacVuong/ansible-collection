# Tags to apply to all metrics (replace with your own)
[global_tags]
  platform = "Windows"

# Recommended standard agent settings
[agent]
  # Collect metrics every seconds
  interval = "30s"
  # Collect metrics at rounded intervals e.g. 0:30 seconds
  round_interval = true
  # Max number of metrics to write in each batch when writing to outputs
  metric_batch_size = 1000
  # Max number of unwritten of metrics (determines memory usage) - anything above limit is dropped
  metric_buffer_limit = 10000
  # Random window in seconds to spread collection over (set if collection is expensive to spread load)
  collection_jitter = "0s"
  # Random window in seconds to spread metric writes over (set to spread load if large spikes are observed)
  flush_jitter = "0s"
  # Stamp all metrics with hostname
  omit_hostname = false

# Collect CPU metrics
[[inputs.cpu]]
  totalcpu = true
  percpu = true
  collect_cpu_time = true
  report_active = false

# Collect disk metrics excluding temporary and overlay filesystems
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]

# Collect disk I/O metrics
[[inputs.diskio]]

# Collect subset of memory metrics
[[inputs.mem]]
  fieldpass =["available*", "available_percent", "used_percent", "used", "total", "available", "swap_free", "swap_total", "commit_limit", "committed_as", "active", "buffered", "cache", "free"]

# Collect network metrics
[[inputs.net]]

# Collect basic system metrics including load
[[inputs.system]]

# Collect subset of systemd service statuses (skip for windows systems)
[[inputs.systemd_units]]
  unittype = "service"
  fieldpass =["active_code*"]

# Collect windows_exporter metrics
[[inputs.prometheus]]
  urls = ["http://localhost:9182/metrics"]
  namedrop = ["windows_service_*"]

# Collect custom promtail metrics
[[inputs.prometheus]]
  urls = ["http://localhost:9080/metrics"]
  [inputs.prometheus.tagpass]
    job = ["*"]

[[inputs.win_services]]
  service_names = [
    "*"
  ]

# Receive OpenTelemetry traces, metrics, and logs over gRPC
[[inputs.opentelemetry]]
  taginclude=["application","otel","station_name"]
  service_address = "0.0.0.0:4317"
  timeout = "5s"
  [inputs.opentelemetry.tags]
    "otel"="telgateway"

# Enable Prometheus endpoint on 9126 - give server IP and port to Prometheus server for scraping
[[outputs.prometheus_client]]
  listen = "0.0.0.0:9126"

# vim: ft=toml
