---
- name: Create base table server folder structure
  ansible.windows.win_file:
    path: "{{ item }}"
    state: directory
  loop:
    - D:\apps
    - D:\apps\bin
    - D:\apps\bin\c_tables
    - D:\apps\c_tables
    - D:\apps\credentials
    - D:\apps\configs\c_tables
    - D:\apps\logs
    - D:\apps\logs\c_tables

- name: Win_deploy
  ansible.builtin.import_role:
    name: casino.server.win_deploy
  vars:
    win_deploy_bins: "{{ non_gdk_table_server_binaries }}"
    win_deploy_services:
      - PYR_C_TABLES

- name: Copy config for table_server
  ansible.windows.win_template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - src: dispatcher.ini
      dest: D:\apps\c_tables\dispatcher.ini

    - src: dispatcher_config.ini
      dest: D:\apps\configs\c_tables\dispatcher.ini

    # apps/monitor_client
    - src: apps/monitor_client/hercules.ini
      dest: D:\apps\monitor_client\hercules.ini

    - src: apps/monitor_client/MemSender.ini
      dest: D:\apps\monitor_client\MemSender.ini
  notify:
    - Restart Table service

# Credentials
- name: Generate cert
  ansible.builtin.include_role:
    name: casino.server.generate_certs
  vars:
    certificate_domain: "disp-{{ env }}.csr.pstars-{{ region }}-intermediate"
- name: Generate encryption key
  ansible.builtin.set_fact:
    key_passphrase: "{{ lookup('ansible.builtin.password', '/dev/null', length=15, chars=['ascii_letters', 'digits'], seed=inventory_hostname) }}"
- name: Download Signed certs from ACM
  ansible.windows.win_command:
    argv:
      - C:\Program Files\Amazon\AWSCLIV2\aws.exe
      - acm
      - export-certificate
      - --certificate-arn
      - "{{ certificate_arn }}"
      - --passphrase
      - "{{ key_passphrase | b64encode }}"
  register: acm_certs
  no_log: true
  when: not ansible_check_mode
- name: Certificate config
  ansible.windows.win_copy:
    content: |
      servercert=d:\apps\credentials\server_disp.pyr.crt
      serverkey=d:\apps\credentials\server_disp.pyr.key
      serverkeypassword={{ key_passphrase }}
    dest: D:\apps\credentials\cert.ini
  notify:
    - Restart Table service
    - Restart HESENDER service
    - Restart MEMSENDER service
- name: CA certificate
  ansible.windows.win_copy:
    remote_src: true
    src: "C:\\software\\pki-csr-pstars-{{ region }}-intermediate.pem"
    dest: D:\apps\credentials\ca_disp.crt
  notify:
    - Restart Table service
    - Restart HESENDER service
    - Restart MEMSENDER service
- name: Server certificate
  ansible.windows.win_copy:
    content: "{{ (acm_certs.stdout | from_json).Certificate }}{{ (acm_certs.stdout | from_json).CertificateChain }}"
    dest: D:\apps\credentials\server_disp.pyr.crt
  notify:
    - Restart Table service
    - Restart HESENDER service
    - Restart MEMSENDER service
- name: Server key
  ansible.windows.win_copy:
    content: "{{ (acm_certs.stdout | from_json).PrivateKey }}"
    dest: D:\apps\credentials\server_disp.pyr.key
  notify:
    - Restart Table service
    - Restart HESENDER service
    - Restart MEMSENDER service
- name: Server pass
  ansible.windows.win_copy:
    content: "{{ key_passphrase }}"
    dest: D:\apps\credentials\server_disp.pyr.pass
  notify:
    - Restart Table service
    - Restart HESENDER service
    - Restart MEMSENDER service

- name: Create Table server service
  ansible.windows.win_service:
    name: PYR_C_TABLES
    path: D:\apps\c_tables\pyr64.exe
    display_name: PYR_C_TABLES
    description: Service for GGN Table Server

# Start app Windows Services
- name: Start Non-GDK-Table-Server service
  ansible.windows.win_service:
    name: PYR_C_TABLES
    start_mode: "{{ service_start_mode }}"
    state: "{{ service_state }}"
  tags:
    - launch

- name: Configure Log Aggregation
  ansible.windows.win_template:
    src: promtail.yaml.j2
    dest: "C:\\ProgramData\\Promtail\\promtail.yaml"
  notify:
    - Restart promtail

- name: Configure net_response metrics
  ansible.windows.win_template:
    src: net_response.conf.j2
    dest: "C:\\ProgramData\\Telegraf\\net_response.conf"
  notify: Restart Telegraf
