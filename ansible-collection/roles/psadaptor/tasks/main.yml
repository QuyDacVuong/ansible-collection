---
- name: Create base psadaptor folder structure
  ansible.windows.win_file:
    path: "{{ item }}"
    state: directory
  loop:
    - D:\apps
    - D:\apps\bin
    - D:\apps\bin\c_adaptor
    - D:\apps\c_adaptor
    - D:\apps\certificates
    - D:\apps\configs
    - D:\apps\configs\c_adaptor
    - D:\apps\configs\c_adaptor\DemoPSAdaptor
    - D:\apps\credentials
    - D:\apps\logs
    - d:\apps\logs\c_adaptor
    - D:\apps\demobackoffice_ps

- name: Deploy psadaptor binaries
  ansible.builtin.import_role:
    name: casino.server.win_deploy
  vars:
    win_deploy_bins: "{{ psadaptor_binaries }}"
    win_deploy_services:
      - PYR_C_ADAPTOR

- name: Generate cert
  ansible.builtin.include_role:
    name: casino.server.generate_certs
  vars:
    certificate_domain: "disp-{{ env }}.csr.pstars-{{ region }}-intermediate"
- name: Generate encryption key
  ansible.builtin.set_fact:
    key_passphrase: "{{ lookup('ansible.builtin.password', '/dev/null', length=15, chars=['ascii_letters', 'digits'], seed=inventory_hostname) }}"
  no_log: true
- name: Download Signed certs from ACM
  ansible.windows.win_command:
    argv:
      - C:\Program Files\Amazon\AWSCLIV2\aws.exe
      - acm
      - export-certificate
      - --certificate-arn
      - "{{ certificate_arn }}"
      - --passphrase
      - "{{ key_passphrase | b64encode }}"
  register: acm_certs
  no_log: true
  when: not ansible_check_mode
- name: Certificate config
  ansible.windows.win_copy:
    content: |
      servercert=d:\apps\certificates\server_disp.pyr.crt
      serverkey=d:\apps\certificates\server_disp.pyr.key
      serverkeypassword={{ key_passphrase }}
    dest: D:\apps\certificates\cert.ini
  notify:
    - Restart adaptor
- name: CA certificate
  ansible.windows.win_copy:
    remote_src: true
    src: "C:\\software\\pki-csr-pstars-{{ region }}-intermediate.pem"
    dest: D:\apps\certificates\ca_disp.crt
  notify:
    - Restart adaptor
- name: Server certificate
  ansible.windows.win_copy:
    content: "{{ (acm_certs.stdout | from_json).Certificate }}{{ (acm_certs.stdout | from_json).CertificateChain }}"
    dest: D:\apps\certificates\server_disp.pyr.crt
  notify:
    - Restart adaptor
- name: Server key
  ansible.windows.win_copy:
    content: "{{ (acm_certs.stdout | from_json).PrivateKey }}"
    dest: D:\apps\certificates\server_disp.pyr.key
  notify:
    - Restart adaptor
- name: Server pass
  ansible.windows.win_copy:
    content: "{{ key_passphrase }}"
    dest: D:\apps\certificates\server_disp.pyr.pass
  notify:
    - Restart adaptor

- name: Adaptor config
  ansible.windows.win_template:
    src: configs/c_adaptor/auxadaptor_ps.ini
    dest: D:\apps\configs\c_adaptor\auxadaptor_ps.ini
  notify:
    - Restart adaptor
- name: Demo adaptor config
  ansible.windows.win_template:
    src: configs/c_adaptor/DemoPSAdaptor/auxadaptor_ps.ini
    dest: D:\apps\configs\c_adaptor\DemoPSAdaptor/auxadaptor_ps.ini
  notify:
    - Restart adaptor
- name: Dispatcher config
  ansible.windows.win_template:
    src: configs/c_adaptor/dispatcher.ini
    dest: D:\apps\configs\c_adaptor\dispatcher.ini
  notify:
    - Restart adaptor
- name: Link dispatcher config
  ansible.windows.win_copy:
    content: "@d:/apps/configs/c_adaptor/dispatcher.ini"
    dest: D:\apps\c_adaptor\dispatcher.ini

- name: Configure monitor
  ansible.windows.win_template:
    src: "{{ item }}"
    dest: "D:\\apps\\monitor_client\\{{ item | basename }}"
  with_fileglob:
    - templates/monitor_client/*.ini
  notify:
    - Restart hesender
    - Restart memsender

- name: Configure Log Aggregation
  ansible.windows.win_template:
    src: promtail.yaml.j2
    dest: "C:\\ProgramData\\Promtail\\promtail.yaml"
  notify:
    - Restart promtail

- name: Create dispatcher service
  ansible.windows.win_service:
    name: PYR_C_ADAPTOR
    path: D:\apps\c_adaptor\pyr64.exe
- name: Start dispatcher service
  ansible.windows.win_service:
    name: PYR_C_ADAPTOR
    start_mode: "{{ service_start_mode }}"
    state: "{{ service_state }}"
  tags:
    - launch

- name: Configure net_response metrics
  ansible.windows.win_template:
    src: net_response.conf.j2
    dest: "C:\\ProgramData\\Telegraf\\net_response.conf"
  notify: Restart telegraf

- name: Deploy demobackoffice binaries
  ansible.builtin.import_role:
    name: casino.server.win_deploy
  vars:
    win_deploy_bins: "{{ demobackoffice_binaries }}"
    win_deploy_services:
      - PYR_C_DEMOBACKOFFICEPS

- name: Demobackoffice config
  ansible.windows.win_template:
    src: configs/demobackoffice_ps/demobackoffice_ps.ini
    dest: D:\apps\demobackoffice_ps\demobackoffice_ps.ini
  notify:
    - Restart demobackoffice

- name: BlockRules config
  ansible.windows.win_template:
    src: configs/demobackoffice_ps/blockRules.cfg
    dest: D:\apps\demobackoffice_ps\blockRules.cfg
  notify:
    - Restart demobackoffice

- name: Dispatcher config
  ansible.windows.win_template:
    src: configs/demobackoffice_ps/dispatcher.ini
    dest: D:\apps\demobackoffice_ps\dispatcher.ini
  notify:
    - Restart demobackoffice

- name: ErrorDict config
  ansible.windows.win_template:
    src: configs/demobackoffice_ps/errorDict.cfg
    dest: D:\apps\demobackoffice_ps\errorDict.cfg
  notify:
    - Restart demobackoffice

- name: Create dispatcher service
  ansible.windows.win_service:
    name: PYR_C_DEMOBACKOFFICEPS
    path: D:\apps\demobackoffice_ps\pyr164.exe
- name: Start dispatcher service
  ansible.windows.win_service:
    name: PYR_C_DEMOBACKOFFICEPS
    start_mode: "{{ service_start_mode }}"
    state: "{{ service_state }}"
  tags:
    - launch
